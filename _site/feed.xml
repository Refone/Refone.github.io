<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refone's Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 20 Sep 2017 10:06:46 +0800</pubDate>
    <lastBuildDate>Wed, 20 Sep 2017 10:06:46 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>Travis CI 使用指南</title>
        <description>&lt;h1 id=&quot;travis-ci使用指南&quot;&gt;travis CI使用指南&lt;/h1&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;travis CI是一个代码自动测试与部署的开方平台，与GitHub相关联。当你一个GitHub中的某个项目与travis CI进行「绑定」后，你就可以体验travis CI为你带来的便捷——每当你push你的项目时，项目就会自动的在travis Server上的沙盒中按照你规定的测试方法进行测试，成功过后自动部署到你的部署服务器上面。而你所需做的「绑定」，不过是写一个.travis.yml脚本。&lt;/p&gt;

&lt;p&gt;这里涉及到了三台机器需要明确：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开发机：&lt;/strong&gt; 代码所在的机器，开发者在这台机器上面进行编码，然后git push到GitHub上面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;部署机：&lt;/strong&gt; 代码正常工作所应在的机器。比如如果我们开发一个网站，最终我们要把这个网站的代码部署到公司的服务器上面才能正常上线被访问。那么公司的服务器就是我们的部署机。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;travis Server：&lt;/strong&gt; 使用travis会引来第三台机器——travis平台的机器。travis会在我们push代码时自动帮我们测试，部署代码，而这一切都是在travis平台的机器上运行的。换句话说，.travis.yml中所执行的语句，执行环境都是travis机器的沙盒。&lt;/p&gt;

&lt;h2 id=&quot;示例详解&quot;&gt;示例详解&lt;/h2&gt;

&lt;h4 id=&quot;1建立travis-ci账号&quot;&gt;1.建立travis CI账号&lt;/h4&gt;

&lt;p&gt;访问&lt;a href=&quot;https://travis-ci.org/&quot;&gt;travis CI官网&lt;/a&gt;，按照提示将travis CI账号与GitHub账号进行绑定，然后勾选需要travis跟踪的GitHub项目。注意这里有可能只能显示private的项目（如果你的GitHub上面没有private的项目那么就显示空白），不过可以通过某个地方设置把所有public的项目也显示出来。&lt;/p&gt;

&lt;h4 id=&quot;2将最原始的travis官方示例clone下来&quot;&gt;2.将最原始的travis官方示例clone下来&lt;/h4&gt;

&lt;p&gt;访问&lt;a href=&quot;https://github.com/plaindocs/travis-broken-example&quot;&gt;travis-broken-example&lt;/a&gt;，将它clone到开发机。里面有一个.travis.yml，在travis的网站上面勾上这个项目，那么每次在开发机上push这个项目都会执行travis的流程(详见&lt;a href=&quot;https://docs.travis-ci.com/user/customizing-the-build/#The-Build-Lifecycle&quot;&gt;The Build Lifecycle&lt;/a&gt;)。
这个broken example会导致build失败，不过将Test.php中的&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $this-&amp;gt;assertEquals(1+1,1);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;改为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $this-&amp;gt;assertEquals(1+1,2);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;即可通过travis的build。&lt;/p&gt;

&lt;h4 id=&quot;3定义自己的测试脚本&quot;&gt;3.定义自己的测试脚本&lt;/h4&gt;

&lt;p&gt;.travis.yml中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;script:&lt;/code&gt; 即是需要跑得测试脚本，多测试脚本可参见文档，凡有一个测试脚本有非0返回值那么就build失败。&lt;/p&gt;

&lt;p&gt;本例添加文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;submodule.php&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
class Module
{
    public function test() {
        return 1;
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;并修改Test.php:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
require &quot;submodule.php&quot;;

class Test extends PHPUnit_Framework_TestCase
{
    public function testOnePlusOne() {
        $m = new Module();
        $this-&amp;gt;assertEquals($m-&amp;gt;test(),1);
    }
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;同样可以通过build。&lt;/p&gt;

&lt;h4 id=&quot;4设置自动部署&quot;&gt;4.设置自动部署&lt;/h4&gt;

&lt;p&gt;这是示例中比较麻烦的部分。主要麻烦之处在于ssh、scp等命令需要输入目标机器（部署机）的密码，而travis一切配置都在.travis.yml的脚本中，脚本没办法交互式的输入密码。&lt;/p&gt;

&lt;p&gt;travis给出的解决办法是：将私钥直接放在项目里，公钥放在部署机上面，travis在build的时候，可以指派使用项目中的私钥对部署机进行免密码通信。而私钥明文放在项目中是很不安全的，travis提供了方法将私钥加密后放在项目中，在travis build的时候才会解密（也就是说哪怕项目是public的，全世界也只有你和travis后台知道你的私钥）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;公私钥系统规则：&lt;/strong&gt; 
私钥只有自己知道，公钥全世界都知道。私钥加密可以用公钥解密；公钥加密能用私钥解密。公私钥相互配对，但从其中一个求解另一个是个数学难题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以在这一步骤中，需要做如下事情：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(1) 生成一套公私钥&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在开发机上，打开项目目录，输入：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen -f travis
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;会生成两个文件，travis是私钥，travis.pub是公钥。&lt;/p&gt;

&lt;p&gt;在部署机上找到 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/authorized_keys&lt;/code&gt; 这个文件。这个文件是用来存别的机器的公钥的，里面每一行（很长的一行）都是一个别的机器的公钥。有了这个东西才代表这个机器曾经输对了密码ssh过你，是你信任的，不用再让他ssh的时候输密码了。将travis.pub添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/authorized_keys&lt;/code&gt;的末尾。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2) 加密私钥&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先需要一个2.0版本的ruby，可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt;查看当前开发机的ruby版本，如果低于2.0，可按照[2]中的步骤来安装一个正确版本的ruby。&lt;/p&gt;

&lt;p&gt;接下来，安装travis加密命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install travis
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;用GitHub账号进行登录：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;travis login
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;加密私钥文件travis，并自动添加到.travis.yml中。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;travis encrypt-file travis  --add
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;完成以上步骤后可以发现在&lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;文件中自动添加了几行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;before_install:
 - openssl aes-256-cbc -K $encrypted_ebf374d9d5b3_key -iv $encrypted_ebf374d9d5b3_iv -in travis.enc -out ~/.ssh/id_rsa -d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;-in travis.enc&lt;/code&gt;代表用加密后的私钥文件（travis.enc是由私钥文件travis加密而来），&lt;code class=&quot;highlighter-rouge&quot;&gt;-out ~/.ssh/id_rsa -d&lt;/code&gt; 代表将加密私钥文件解密后放在&lt;strong&gt;travis server&lt;/strong&gt;上的&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/id_rsa&lt;/code&gt;中。完成这一步，就代表了可以有从travis server到部署机上的免密码通信。接下来所有脚本中的命令无密码执行也就成为了可能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 自动生成的这两行可能在&lt;code class=&quot;highlighter-rouge&quot;&gt;-in&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;-out&lt;/code&gt;的文件路径上不正确，需要自己调整。前面一大堆是自动生成的，不要照抄。&lt;/p&gt;

&lt;p&gt;除此之外，在&lt;code class=&quot;highlighter-rouge&quot;&gt;before_install&lt;/code&gt;中加入另外两行命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;before_install:
 - openssl aes-256-cbc -K $encrypted_ebf374d9d5b3_key -iv $encrypted_ebf374d9d5b3_iv -in travis.enc -out ~/.ssh/id_rsa -d
 - chmod 600 ~/.ssh/id_rsa
 - echo -e &quot;Host 111.231.57.187\n\tStrictHostKeyChecking no\n&quot; &amp;gt;&amp;gt; ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;最后一条里面的ip写自己部署机的ip。记得是公网ip，不是192.168开头的那个ip。命令意义是设置免密码ssh。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3) 设置known_hosts &lt;sup&gt;[1]&lt;/sup&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为 travis-ci 默认只添加了 &lt;code class=&quot;highlighter-rouge&quot;&gt;github.com&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;gist.github.com&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh.github.com&lt;/code&gt; 为 known_hosts，rsync 执行时会提示是否添加，但是 travis-ci 里不能输入确认，所以需要将自动服务器的域名和商品添加到 known_hosts，添加如下语句：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addons:
  ssh_known_hosts: 111.231.57.187:1223
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;1223代表如果你的ssh默认端口不是22（ssh默认端口在目标机器的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; 中查看），可以这么写。如果是默认的22端口，只用写域名或者ip。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(4) 设置hooks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;添加代码使得在build成功过后能自动部署到部署机上：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;after_success:
 - ssh root@111.231.57.187 'cd travis-broken-example &amp;amp;&amp;amp; git pull'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完整的.travis.yml:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;language: php
php:
- 5.5
- 5.4

before_install:
- openssl aes-256-cbc -K $encrypted_ebf374d9d5b3_key -iv $encrypted_ebf374d9d5b3_iv -in travis.enc -out ~/.ssh/id_rsa -d
- chmod 600 ~/.ssh/id_rsa
- echo -e &quot;Host 111.231.57.187\n\tStrictHostKeyChecking no\n&quot; &amp;gt;&amp;gt; ~/.ssh/config

addons:
  ssh_known_hosts: 111.231.57.187

script: phpunit Test.php

after_success:
 - ssh root@111.231.57.187 'cd travis-broken-example &amp;amp;&amp;amp; git pull'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;使用&quot;&gt;使用&lt;/h2&gt;

&lt;p&gt;在开发机上开发项目，git commit，git push之后，就会在travis上面自动build，build信息可以点开build jobs在Job Log中查看。如果成功，再查看部署机上的项目目录，发现刚刚push的最新版本的代码已经同步到了部署机上面。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;[1] &lt;a href=&quot;https://uedsky.com/2016-06/travis-deploy/&quot;&gt;Hexo 博客 travis-ci 自动部署到VPS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] &lt;a href=&quot;https://juejin.im/entry/5893590a128fe1006545a980&quot;&gt;一点都不高大上，手把手教你使用 Travis CI 实现持续部署&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] &lt;a href=&quot;https://docs.travis-ci.com/&quot;&gt;travis CI User Documents&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Sep 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/05/travis/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/05/travis/</guid>
        
        <category>工具</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Hux Blog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Hux 的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2015 年，Hux 总算有个地方可以好好写点东西了。&lt;/p&gt;

&lt;p&gt;作为一个程序员， Blog 这种轮子要是挂在大众博客程序上就太没意思了。一是觉得大部分 Blog 服务都太丑，二是觉得不能随便定制不好玩。之前因为太懒没有折腾，结果就一直连个写 Blog 的地儿都没有。&lt;/p&gt;

&lt;p&gt;在玩了一段时间知乎之后，答题的快感又激起了我开博客的冲动。之前的&lt;a href=&quot;http://huangxuan.me/portfolio&quot;&gt;个人网站&lt;/a&gt;是作品集形式的（现在集成进来了），并不适合用来写博文，一不做二不休，花一天搞一个吧！&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;接下来说说搭建这个博客的技术细节。&lt;/p&gt;

&lt;p&gt;正好之前就有关注过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，非常轻松时尚。&lt;/p&gt;

&lt;p&gt;其优点非常明显：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 带来的优雅写作体验&lt;/li&gt;
  &lt;li&gt;非常熟悉的 Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
    &lt;ul&gt;
      &lt;li&gt;如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll 的自定制非常容易，基本就是个模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本来觉得最大的缺点可能是 GitHub 在国内访问起来太慢，所以第二天一起床就到 GitCafe(Chinese GitHub Copy) 迁移了一个&lt;a href=&quot;http://huxpro.gitcafe.io&quot;&gt;镜像&lt;/a&gt;出来，结果还是巨慢。&lt;/p&gt;

&lt;p&gt;哥哥可是个前端好嘛！ 果断开 Chrome DevTool 查了下网络请求，原来是 &lt;strong&gt;pending 在了 Google Fonts&lt;/strong&gt; 上，页面渲染一直被阻塞到请求超时为止，难怪这么慢。&lt;br /&gt;
忍痛割爱，只好把 Web Fonts 去了（反正超时看到的也只能是 fallback ），果然一下就正常了，而且 GitHub 和 GitCafe 对比并没有感受到明显的速度差异，虽然 github 的 ping 值明显要高一些，达到了 300ms，于是用 DNSPOD 优化了一下速度。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;配置的过程中也没遇到什么坑，基本就是 Git 的流程，相当顺手&lt;/p&gt;

&lt;p&gt;大的 Jekyll 主题上直接 fork 了 Clean Blog（这个主题也相当有名，就不多赘述了。唯一的缺点大概就是没有标签支持，于是我给它补上了。）&lt;/p&gt;

&lt;p&gt;本地调试环境需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;，结果 rubygem 的源居然被墙了……后来手动改成了我大淘宝的镜像源才成功&lt;/p&gt;

&lt;p&gt;Theme 的 CSS 是基于 Bootstrap 定制的，看得不爽的地方直接在 Less 里改就好了（平时更习惯 SCSS 些），&lt;strong&gt;不过其实我一直觉得 Bootstrap 在移动端的体验做得相当一般，比我在淘宝参与的团队 CSS 框架差多了……&lt;/strong&gt;所以为了体验，也补了不少 CSS 进去&lt;/p&gt;

&lt;p&gt;最后就进入了耗时反而最长的&lt;strong&gt;做图、写字&lt;/strong&gt;阶段，也算是进入了&lt;strong&gt;写博客&lt;/strong&gt;的正轨，因为是类似 Hack Day 的方式去搭这个站的，所以折腾折腾着大半夜就过去了。&lt;/p&gt;

&lt;p&gt;第二天考虑中文字体的渲染，fork 了 &lt;a href=&quot;http://www.typeisbeautiful.com/&quot;&gt;Type is Beautiful&lt;/a&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;font&lt;/code&gt; CSS，调整了字号，适配了 Win 的渣渲染，中英文混排效果好多了。&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;回顾这个博客的诞生，纯粹是出于个人兴趣。在知乎相关问题上回答并获得一定的 star 后，我决定把这个博客主题当作一个小小的开源项目来维护。&lt;/p&gt;

&lt;p&gt;在经历 v1.0 - v1.5 的蜕变后，这个博客主题愈发完整，不但增加了诸多 UI 层的优化（opinionated）；在代码层面，更加丰富的配置项也使得这个主题拥有了更好的灵活性与可拓展性。而作为一个开源项目，我也积极的为其完善文档与解决 issue。&lt;/p&gt;

&lt;p&gt;如果你恰好逛到了这里，希望你也能喜欢这个博客主题。&lt;/p&gt;

&lt;p&gt;—— Hux 后记于 2015.10&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Jan 2015 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2015/01/29/hello-2015/</link>
        <guid isPermaLink="true">http://localhost:4000/2015/01/29/hello-2015/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
